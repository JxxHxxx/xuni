plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'jacoco'
    id "org.asciidoctor.jvm.convert" version "3.3.2"

}

group = 'com.jxx'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    asciidoctorExt
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

task configureBootJar {
    dependsOn asciidoctor
    dependsOn test

    doLast {
        bootJar {
            from("${asciidoctor.outputDir}") {
                into 'static/docs'
            }

            if (project.hasProperty('devProfile')) {
                configurations.runtimeClasspath.getFiles().each { file ->
                    from(zipTree(file)) {
                        includeEmptyDirs = false
                        include "application-dev.properties"
                    }
                }
            } else {
                configurations.runtimeClasspath.getFiles().each { file ->
                    from(zipTree(file)) {
                        includeEmptyDirs = false
                        include "application.properties"
                    }
                }
            }
        }
    }
}

bootJar {
    enabled = true
    dependsOn configureBootJar
}

jacoco {
    toolVersion = '0.8.8'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //actuator - prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //database
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    //cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.5'

    //lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //aws - s3
    implementation 'software.amazon.awssdk.crt:aws-crt:0.21.1'
    implementation group: 'software.amazon.awssdk', name: 's3-transfer-manager', version: '2.19.17'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //jwt
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'

    //rest docs
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    //email
    implementation 'org.springframework.boot:spring-boot-starter-mail'

}

tasks.named('test') {
    useJUnitPlatform()
}
